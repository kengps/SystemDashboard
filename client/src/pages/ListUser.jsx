import React, { useEffect } from "react";

import { useSelector } from "react-redux";

import sweetAlert from "sweetalert2";

import { toast } from "react-toastify";

import { storeAuth } from "../service/store/storeZustand";
import { useStore } from "../service/zustand/storeCase";
import TableUser from "../views/users/TableUser";


const ListUser = () => {

  //const listUse1 = useStore((state) => state.listUser);
  // const userList = useStore((state) => state.userList);
  const { listUser, userList, deleteUsers, responseDelete, changStatusUser, changRoleUser } = useStore();


  const { user } = useSelector((state) => state);

  const dataUser = storeAuth((state) => state.user)





  const resChangStatus = useStore((state) => state.resChangStatus);



  useEffect(() => {
    loadData(dataUser.token);

  }, []);


  const loadData = (authtoken) => {
    listUser(authtoken)

  };


  //TOdo Func ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏• ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å api ‡∏à‡∏≤‡∏Å  deleteUser
  //! ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô if (result.isConfirmed) ‡πÉ‡∏ô func handleClick ‡πÑ‡∏î‡πâ‡∏ô‡∏∞
  const confirmDelete = async (id) => {
    const res = await deleteUsers(id)
    sweetAlert.fire("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", res, "success");
    loadData();
    // loadUser(user.token);
  };

  //* ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
  const handleClick = async (id) => {
    //todo ‡∏´‡∏≤‡∏Å‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö ‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
    try {
      const result = await sweetAlert.fire({
        title: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
        icon: "warning",
        showCancelButton: true,
      });

      //todo ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° OK ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ï‡∏Å‡∏•‡∏á ‡∏à‡∏∞‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏ó‡∏µ‡πà  api ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (result.isConfirmed) {
        //todo ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î confirm ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function confirmDelete

        await confirmDelete(id);
      }
    } catch (error) {
    }
  };

  //* style
  const navDropdownItemStyle = {
    display: "flex",
    alignItems: "center",
    gap: "10px",
  };

  //* function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î user
  const handleOnchange = async (e, id) => {
    //‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ checkbox ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πà e.target.checked
    //‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ switch ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πà e


    const checked = e.target.checked
    console.log(`‚©á‚©á:‚©á‚©áüö®  file: ListUser.jsx:88  checked :`, checked);

    const value = {
      id: id,
      enabled: checked,
    };
    console.log(`‚©á‚©á:‚©á‚©áüö®  file: ListUser.jsx:94  value :`, value);

    try {
      const result = await sweetAlert.fire({
        title: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
        icon: "warning",
        showCancelButton: true,
      });
      //todo ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° OK ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ï‡∏Å‡∏•‡∏á ‡∏à‡∏∞‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏ó‡∏µ‡πà  api ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (result.isConfirmed) {
        //todo ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î confirm ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function confirmDelete

        await changStatusUser(dataUser.token, value)
      }

      // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å changStatusUser ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ resChangStatus

      const notify =
        resChangStatus.enabled === true
          ? "‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
          : "‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";


      toast.success(notify);

      loadData(dataUser.token);
    } catch (error) {
    }


  };

  //‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏∞‡∏î‡∏±‡∏ö


  // function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç role ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á select ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ copy ‡∏à‡∏≤‡∏ÅhandleOnchange ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ function  ‡πÄ‡∏≠‡∏á
  const handleOnchangeRole = async (e, id) => {
    try {
      const value = {
        id: id,
        role: e,
      };

      //changRole ‡∏Ñ‡∏∑‡∏≠ function ‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á API
      await changRoleUser(dataUser.token, value)

      toast.success("‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      loadData(dataUser.token);

    } catch (error) {
    }

  };


  return (
    <>

      <TableUser value={userList} handleOnchange={handleOnchange} handleClick={handleClick} handleOnchangeRole={handleOnchangeRole} dataUser={dataUser} />
      

    </>

  );
};

export default ListUser;
